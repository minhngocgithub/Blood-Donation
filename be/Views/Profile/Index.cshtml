@model BloodDonationAPI.Models.ViewModels.Profile.ProfileViewModel
@{
    ViewData["Title"] = "Thông Tin Cá Nhân";
}

<link href="~/css/profile.css" rel="stylesheet" />

<div class="profile-container">
    <div class="profile-wrapper">
        <!-- Header -->
        <div class="profile-header">
            <div class="header-content">
                <i class="fas fa-heart heart-icon"></i>
                <h1>Thông Tin Cá Nhân</h1>
            </div>
            <p class="header-description">Cập nhật thông tin để chúng tôi có thể liên hệ và hỗ trợ bạn tốt hơn</p>
        </div>

        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success mb-4">
                <i class="fas fa-check-circle mr-2"></i>
                @TempData["SuccessMessage"]
            </div>
        }

        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert alert-danger mb-4">
                <i class="fas fa-exclamation-circle mr-2"></i>
                @TempData["ErrorMessage"]
            </div>
        }

        <form asp-action="UpdateProfile" method="post" class="profile-form">
            @Html.AntiForgeryToken()
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            
            <div class="form-grid">
                <!-- Personal Information Card -->
                <div class="info-card">
                    <div class="card-header">
                        <div class="card-title">
                            <i class="fas fa-user card-icon"></i>
                            <span>Thông Tin Cá Nhân</span>
                        </div>
                        <p class="card-description">Cập nhật thông tin cơ bản của bạn</p>
                    </div>
                    <div class="card-content">
                        <div class="form-group">
                            <label asp-for="FullName" class="form-label required">Họ và Tên</label>
                            <input asp-for="FullName" class="form-control" placeholder="Nhập họ và tên đầy đủ" />
                            <span asp-validation-for="FullName" class="text-danger"></span>
                        </div>

                        <div class="form-group">
                            <label asp-for="Email" class="form-label required">Email</label>
                            <div class="input-with-icon">
                                <i class="fas fa-envelope input-icon"></i>
                                <input asp-for="Email" class="form-control with-icon" placeholder="example@email.com" readonly />
                            </div>
                            <span asp-validation-for="Email" class="text-danger"></span>
                        </div>

                        <div class="form-group">
                            <label asp-for="Phone" class="form-label">Số Điện Thoại</label>
                            <div class="input-with-icon">
                                <i class="fas fa-phone input-icon"></i>
                                <input asp-for="Phone" class="form-control with-icon" placeholder="0123456789" />
                            </div>
                            <span asp-validation-for="Phone" class="text-danger"></span>
                        </div>

                        <div class="form-group">
                            <label asp-for="Gender" class="form-label">Giới Tính</label>
                            <select asp-for="Gender" class="form-control">
                                <option value="">Chọn giới tính</option>
                                <option value="Nam">Nam</option>
                                <option value="Nữ">Nữ</option>
                                <option value="Khác">Khác</option>
                            </select>
                            <span asp-validation-for="Gender" class="text-danger"></span>
                        </div>
                    </div>
                </div>

                <!-- Additional Information Card -->
                <div class="info-card">
                    <div class="card-header">
                        <div class="card-title">
                            <i class="fas fa-map-marker-alt card-icon"></i>
                            <span>Thông Tin Bổ Sung</span>
                        </div>
                        <p class="card-description">Thông tin địa chỉ và sức khỏe</p>
                    </div>
                    <div class="card-content">
                        <div class="form-group">
                            <label asp-for="DateOfBirth" class="form-label">Ngày Sinh</label>
                            <div class="input-with-icon">
                                <i class="fas fa-calendar input-icon"></i>
                                <input asp-for="DateOfBirth" type="date" class="form-control with-icon" />
                            </div>
                            <span asp-validation-for="DateOfBirth" class="text-danger"></span>
                        </div>

                        <div class="form-group">
                            <label asp-for="BloodType" class="form-label">Nhóm Máu</label>
                            <div class="input-with-icon">
                                <i class="fas fa-tint input-icon blood-icon"></i>
                                <select asp-for="BloodType" class="form-control with-icon">
                                    <option value="">Chọn nhóm máu</option>
                                    @if (ViewBag.BloodTypes != null)
                                    {
                                        foreach (var bloodType in ViewBag.BloodTypes)
                                        {
                                            <option value="@bloodType.BloodTypeId">@bloodType.BloodTypeName</option>
                                        }
                                    }
                                </select>
                            </div>
                            <span asp-validation-for="BloodType" class="text-danger"></span>
                        </div>

                        <div class="form-group">
                            <label asp-for="Province" class="form-label">Tỉnh/Thành phố</label>
                            <select asp-for="Province" id="province" class="form-control">
                                <option value="">Chọn tỉnh/thành phố</option>
                            </select>
                            <span asp-validation-for="Province" class="text-danger"></span>
                        </div>

                        <div class="form-group">
                            <label asp-for="District" class="form-label">Quận/Huyện</label>
                            <select asp-for="District" id="district" class="form-control" disabled>
                                <option value="">Chọn quận/huyện</option>
                            </select>
                            <span asp-validation-for="District" class="text-danger"></span>
                        </div>

                        <div class="form-group">
                            <label asp-for="Ward" class="form-label">Phường/Xã</label>
                            <select asp-for="Ward" id="ward" class="form-control" disabled>
                                <option value="">Chọn phường/xã</option>
                            </select>
                            <span asp-validation-for="Ward" class="text-danger"></span>
                        </div>

                        <div class="form-group">
                            <label asp-for="AddressDetail" class="form-label">Số nhà, tên đường</label>
                            <input asp-for="AddressDetail" id="addressDetail" class="form-control" placeholder="Nhập số nhà, tên đường" />
                            <span asp-validation-for="AddressDetail" class="text-danger"></span>
                        </div>

                        <!-- Hidden field to store full address -->
                        <input type="hidden" asp-for="Address" id="fullAddress" />
                    </div>
                </div>
            </div>

            <!-- Donation History Card -->
            <div class="info-card full-width">
                <div class="card-header">
                    <div class="card-title">
                        <i class="fas fa-heart card-icon"></i>
                        <span>Lịch Sử Hiến Máu</span>
                    </div>
                    <p class="card-description">Thông tin về lần hiến máu gần nhất</p>
                </div>
                <div class="card-content">
                    <div class="donation-stats">
                        <div class="stat-card last-donation">
                            <div class="stat-header">
                                <i class="fas fa-calendar-alt stat-icon"></i>
                                <span class="stat-title">Lần hiến máu gần nhất</span>
                            </div>
                            <p class="stat-value">
                                @(Model.LastDonationDate?.ToString("dd/MM/yyyy") ?? "Chưa có thông tin")
                            </p>
                        </div>
                        <div class="stat-card total-donations">
                            <div class="stat-header">
                                <i class="fas fa-heart stat-icon"></i>
                                <span class="stat-title">Tổng số lần hiến máu</span>
                            </div>
                            <p class="stat-value">@Model.TotalDonations lần</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Action Buttons -->
            <div class="form-actions">
                <a href="@Url.Action("Index", "Home")" class="btn btn-outline">
                    <i class="fas fa-times"></i>
                    Hủy
                </a>
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-heart"></i>
                    Cập Nhật Thông Tin
                </button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    @await Html.PartialAsync("_NotificationScripts")
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const provinceSelect = document.getElementById('province');
            const districtSelect = document.getElementById('district');
            const wardSelect = document.getElementById('ward');
            const addressDetailInput = document.getElementById('addressDetail');
            const fullAddressInput = document.getElementById('fullAddress');

            if (!provinceSelect || !districtSelect || !wardSelect || !addressDetailInput || !fullAddressInput) {
                console.error('One or more required elements not found:', {
                    provinceSelect: !!provinceSelect,
                    districtSelect: !!districtSelect,
                    wardSelect: !!wardSelect,
                    addressDetailInput: !!addressDetailInput,
                    fullAddressInput: !!fullAddressInput
                });
                return;
            }

            function decodeHTMLEntities(text) {
                if (!text) return '';
                const textArea = document.createElement('textarea');
                textArea.innerHTML = text;
                return textArea.value;
            }

            function logAddressState() {
                console.log('Current address state:', {
                    province: provinceSelect?.value || '',
                    provinceName: provinceSelect?.options[provinceSelect.selectedIndex]?.text || '',
                    district: districtSelect?.value || '',
                    districtName: districtSelect?.options[districtSelect.selectedIndex]?.text || '',
                    ward: wardSelect?.value || '',
                    wardName: wardSelect?.options[wardSelect.selectedIndex]?.text || '',
                    addressDetail: addressDetailInput?.value || '',
                    fullAddress: fullAddressInput?.value || ''
                });
            }

            async function loadProvinces() {
                try {
                    console.log('Loading provinces...');
                    const response = await fetch('https://provinces.open-api.vn/api/p/');
                    const provinces = await response.json();
                    
                    provinces.forEach(province => {
                        const option = new Option(province.name, province.name);
                        provinceSelect.add(option);
                    });

                    const savedProvince = decodeHTMLEntities('@Model.Province');
                    console.log('Saved province from model (decoded):', savedProvince);
                    if (savedProvince && savedProvince.trim()) {
                        console.log('Looking for province option:', savedProvince);
                        const options = Array.from(provinceSelect.options);
                        console.log('Available province options:', options.map(opt => opt.text));
                        
                        const option = options.find(opt => 
                            opt.text.trim().toLowerCase() === savedProvince.trim().toLowerCase()
                        );
                        if (option) {
                            console.log('Found matching province option:', option.text);
                            option.selected = true;
                            districtSelect.disabled = false;
                            loadDistricts(option.text);
                        } else {
                            console.warn('No matching province option found for:', savedProvince);
                        }
                    } else {
                        console.log('No saved province value');
                    }
                } catch (error) {
                    console.error('Error loading provinces:', error);
                }
            }

            async function loadDistricts(provinceName) {
                try {
                    console.log('Loading districts for province:', provinceName);
                    const response = await fetch(`https://provinces.open-api.vn/api/p/search/?q=${encodeURIComponent(provinceName)}`);
                    const provinces = await response.json();
                    
                    if (provinces.length > 0) {
                        const province = provinces[0];
                        const districtsResponse = await fetch(`https://provinces.open-api.vn/api/p/${province.code}?depth=2`);
                        const provinceData = await districtsResponse.json();
                        
                        provinceData.districts.forEach(district => {
                            const option = new Option(district.name, district.name);
                            districtSelect.add(option);
                        });

                        const savedDistrict = decodeHTMLEntities('@Model.District');
                        console.log('Saved district from model (decoded):', savedDistrict);
                        if (savedDistrict && savedDistrict.trim()) {
                            console.log('Looking for district option:', savedDistrict);
                            const options = Array.from(districtSelect.options);
                            console.log('Available district options:', options.map(opt => opt.text));
                            
                            const option = options.find(opt => 
                                opt.text.trim().toLowerCase() === savedDistrict.trim().toLowerCase()
                            );
                            if (option) {
                                console.log('Found matching district option:', option.text);
                                option.selected = true;
                                wardSelect.disabled = false;
                                loadWards(option.text);
                            } else {
                                console.warn('No matching district option found for:', savedDistrict);
                            }
                        } else {
                            console.log('No saved district value');
                        }
                    }
                } catch (error) {
                    console.error('Error loading districts:', error);
                }
            }

            async function loadWards(districtName) {
                try {
                    console.log('Loading wards for district:', districtName);
                    const response = await fetch(`https://provinces.open-api.vn/api/d/search/?q=${encodeURIComponent(districtName)}`);
                    const districts = await response.json();
                    
                    if (districts.length > 0) {
                        const district = districts[0];
                        const wardsResponse = await fetch(`https://provinces.open-api.vn/api/d/${district.code}?depth=2`);
                        const districtData = await wardsResponse.json();
                        
                        districtData.wards.forEach(ward => {
                            const option = new Option(ward.name, ward.name);
                            wardSelect.add(option);
                        });

                        const savedWard = decodeHTMLEntities('@Model.Ward');
                        console.log('Saved ward from model (decoded):', savedWard);
                        if (savedWard && savedWard.trim()) {
                            console.log('Looking for ward option:', savedWard);
                            const options = Array.from(wardSelect.options);
                            console.log('Available ward options:', options.map(opt => opt.text));
                            
                            const option = options.find(opt => 
                                opt.text.trim().toLowerCase() === savedWard.trim().toLowerCase()
                            );
                            if (option) {
                                console.log('Found matching ward option:', option.text);
                                option.selected = true;
                                updateFullAddress();
                            } else {
                                console.warn('No matching ward option found for:', savedWard);
                            }
                        } else {
                            console.log('No saved ward value');
                        }
                    }
                } catch (error) {
                    console.error('Error loading wards:', error);
                }
            }

            function updateFullAddress() {
                try {
                    const province = provinceSelect.options[provinceSelect.selectedIndex]?.text || '';
                    const district = districtSelect.options[districtSelect.selectedIndex]?.text || '';
                    const ward = wardSelect.options[wardSelect.selectedIndex]?.text || '';
                    const addressDetail = addressDetailInput.value.trim();

                    const parts = [addressDetail, ward, district, province].filter(part => part);
                    const fullAddress = parts.join(', ');
                    
                    console.log('Current address components:', {
                        province: provinceSelect?.options[provinceSelect.selectedIndex]?.text,
                        district: districtSelect?.options[districtSelect.selectedIndex]?.text,
                        ward: wardSelect?.options[wardSelect.selectedIndex]?.text,
                        addressDetail: addressDetail
                    });

                    if (fullAddressInput) {
                        fullAddressInput.value = fullAddress;
                        console.log('Updated full address value:', fullAddress);
                    }
                    
                    console.log('Updated full address:', fullAddress);
                } catch (error) {
                    console.error('Error updating address:', error);
                }
            }

            provinceSelect.addEventListener('change', async function() {
                console.log('Province changed:', this.value);
                
                districtSelect.innerHTML = '<option value="">Chọn quận/huyện</option>';
                wardSelect.innerHTML = '<option value="">Chọn phường/xã</option>';
                
                districtSelect.disabled = !this.value;
                wardSelect.disabled = true;
                
                if (this.value) {
                    await loadDistricts(this.value);
                }
                updateFullAddress();
            });

            districtSelect.addEventListener('change', async function() {
                console.log('District changed:', this.value);
                
                wardSelect.innerHTML = '<option value="">Chọn phường/xã</option>';
                wardSelect.disabled = !this.value;
                
                if (this.value) {
                    await loadWards(this.value);
                }
                updateFullAddress();
            });

            wardSelect.addEventListener('change', function() {
                console.log('Ward changed:', this.value);
                updateFullAddress();
            });

            addressDetailInput.addEventListener('input', function() {
                console.log('Address detail changed:', this.value);
                updateFullAddress();
            });

            loadProvinces();
        });
    </script>
}
