@model IEnumerable<Blood_Donation_Website.Models.DTOs.BloodDonationEventDto>
@{
    ViewData["Title"] = "Sự kiện hiến máu";
}

<link rel="stylesheet" href="~/css/event-page.css" />

<div class="events-page">
    <!-- Page Header -->
    <section class="page-header py-5 bg-primary text-white">
        <div class="container">
            <div class="row">
                <div class="col-lg-8 mx-auto text-center">
                    <h1 class="display-4 mb-3">Sự kiện hiến máu</h1>
                    <p class="lead mb-0">
                        Tham gia các sự kiện hiến máu để góp phần cứu sống những sinh mạng quý giá
                    </p>
                </div>
            </div>
        </div>
    </section>

    <!-- Search and Filter Section -->
    <section class="search-filter-section py-4 bg-light">
        <div class="container">
            <div class="row">
                <div class="col-lg-8">
                    <div class="search-box">
                        <div class="input-group">
                            <input type="text" class="form-control form-control-lg" 
                                   placeholder="Tìm kiếm sự kiện..." id="searchInput">
                            <button class="btn btn-primary" type="button" id="searchBtn">
                                <i class="fas fa-search"></i>
                            </button>
                        </div>
                    </div>
                </div>
                <div class="col-lg-4">
                    <div class="filter-options">
                        <select class="form-select form-select-lg" id="locationFilter">
                            <option value="">Tất cả địa điểm</option>
                        </select>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Events Section -->
    <section class="events-list-section py-5">
        <div class="container">
            <div id="eventsContainer" class="row">
                <partial name="_EventCards" model="Model" />
            </div>

            <!-- Loading Indicator -->
            <div class="text-center mt-5" id="loadingIndicator" style="display: none;">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Đang tải...</span>
                </div>
                <p class="mt-2">Đang tải thêm sự kiện...</p>
            </div>

            <!-- No More Events Message -->
            <div class="text-center mt-5" id="noMoreEvents" style="display: none;">
                <i class="fas fa-check-circle text-success mb-3" style="font-size: 3rem;"></i>
                <h4>Đã hiển thị tất cả sự kiện</h4>
                <p class="text-muted">Không có thêm sự kiện nào để hiển thị</p>
            </div>
        </div>
    </section>
</div>

<!-- Custom CSS -->
<style>
    .events-page {
        min-height: 100vh;
    }

    .page-header {
        background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
    }

    .search-box .form-control:focus {
        border-color: #dc3545;
        box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);
    }

    .event-card {
        background: white;
        border-radius: 15px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
        overflow: hidden;
        margin-bottom: 2rem;
    }

    .event-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    }

    .event-image {
        position: relative;
        height: 200px;
        overflow: hidden;
    }

    .event-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
    }

    .event-card:hover .event-image img {
        transform: scale(1.05);
    }

    .event-date {
        position: absolute;
        top: 15px;
        right: 15px;
        background: rgba(220, 53, 69, 0.9);
        color: white;
        padding: 10px;
        border-radius: 8px;
        text-align: center;
        min-width: 60px;
    }

    .event-date .day {
        display: block;
        font-size: 1.5rem;
        font-weight: bold;
        line-height: 1;
    }

    .event-date .month {
        display: block;
        font-size: 0.8rem;
        text-transform: uppercase;
    }

    .event-content {
        padding: 1.5rem;
    }

    .event-title {
        font-size: 1.25rem;
        font-weight: 600;
        margin-bottom: 1rem;
        color: #2c3e50;
    }

    .event-meta {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        margin-bottom: 1rem;
        font-size: 0.9rem;
        color: #6c757d;
    }

    .event-meta span {
        display: flex;
        align-items: center;
    }

    .event-description {
        color: #6c757d;
        margin-bottom: 1.5rem;
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .event-actions {
        display: flex;
        gap: 0.5rem;
        align-items: center;
    }

    .btn-register {
        background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
        border: none;
        color: white;
        padding: 0.5rem 1.5rem;
        border-radius: 25px;
        transition: all 0.3s ease;
    }

    .btn-register:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(220, 53, 69, 0.3);
        color: white;
    }

    .event-status {
        padding: 0.25rem 0.75rem;
        border-radius: 15px;
        font-size: 0.75rem;
        font-weight: 500;
        text-transform: uppercase;
    }

    .status-active {
        background-color: #d4edda;
        color: #155724;
    }

    .status-full {
        background-color: #f8d7da;
        color: #721c24;
    }

    .status-ended {
        background-color: #e2e3e5;
        color: #383d41;
    }

    /* Responsive styles */
    media (max-width: 768px) {
        .event-meta {
            flex-direction: column;
            gap: 0.5rem;
        }
        .event-actions {
            flex-direction: column;
            align-items: stretch;
        }
    }
</style>

<!-- JavaScript for Infinite Scroll -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    let currentPage = 1;
    let isLoading = false;
    let hasMoreEvents = true;
    
    const eventsContainer = document.getElementById('eventsContainer');
    const loadingIndicator = document.getElementById('loadingIndicator');
    const noMoreEvents = document.getElementById('noMoreEvents');
    
    // Infinite scroll functionality
    function checkScroll() {
        if (isLoading || !hasMoreEvents) return;
        
        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
        const windowHeight = window.innerHeight;
        const documentHeight = document.documentElement.scrollHeight;
        
        // Load more when user is 200px from bottom
        if (scrollTop + windowHeight >= documentHeight - 200) {
            loadMoreEvents();
        }
    }
    
    function loadMoreEvents() {
        if (isLoading || !hasMoreEvents) return;
        
        isLoading = true;
        currentPage++;
        loadingIndicator.style.display = 'block';
        
        fetch(`/Events/LoadMoreEvents?page=${currentPage}&pageSize=6`, {
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => response.text())
        .then(html => {
            loadingIndicator.style.display = 'none';
            
            if (html.trim() === '' || html.includes('no-events')) {
                hasMoreEvents = false;
                noMoreEvents.style.display = 'block';
            } else {
                eventsContainer.insertAdjacentHTML('beforeend', html);
            }
        })
        .catch(error => {
            console.error('Error loading more events:', error);
            showError('Có lỗi xảy ra khi tải thêm sự kiện');
        })
        .finally(() => {
            isLoading = false;
        });
    }
    
    // Event listeners
    window.addEventListener('scroll', checkScroll);
    
    // Search functionality
    const searchInput = document.getElementById('searchInput');
    const searchBtn = document.getElementById('searchBtn');
    
    function performSearch() {
        const query = searchInput.value.trim();
        // TODO: Implement search functionality
        console.log('Searching for:', query);
    }
    
    searchBtn.addEventListener('click', performSearch);
    searchInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            performSearch();
        }
    });
    
    // Filter functionality
    const locationFilter = document.getElementById('locationFilter');
    locationFilter.addEventListener('change', function() {
        const selectedLocation = this.value;
        // TODO: Implement filter functionality
        console.log('Filtering by location:', selectedLocation);
    });
    
    // Event registration
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('btn-register') || e.target.closest('.btn-register')) {
            e.preventDefault();
            const button = e.target.classList.contains('btn-register') ? e.target : e.target.closest('.btn-register');
            const eventId = button.dataset.eventId;
            registerForEvent(eventId);
        }
    });
    
    function registerForEvent(eventId) {
        fetch('/Events/Register', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
            },
            body: JSON.stringify({ eventId: eventId })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showSuccess(data.message);
            } else {
                showWarning('Thông báo', data.message);
            }
        })
        .catch(error => {
            console.error('Error registering for event:', error);
            showError('Có lỗi xảy ra khi đăng ký sự kiện');
        });
    }
});
</script>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const locationFilter = document.getElementById('locationFilter');
            if (locationFilter) {
                fetch('https://provinces.open-api.vn/api/p/')
                    .then(response => response.json())
                    .then(provinces => {
                        provinces.forEach(province => {
                            const option = new Option(province.name, province.name);
                            locationFilter.add(option);
                        });
                    })
                    .catch(error => {
                        console.error('Error loading provinces:', error);
                    });
            }
        });
    </script>
}
