@model Blood_Donation_Website.Models.DTOs.LocationDto
@{
    ViewData["Title"] = "Chỉnh sửa địa điểm";
}

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="card shadow-sm">
                <div class="card-header bg-danger text-white">
                    <div class="d-flex align-items-center">
                        <i class="fas fa-edit me-2"></i>
                        <h4 class="mb-0">Chỉnh sửa địa điểm</h4>
                    </div>
                </div>
                <div class="card-body">
                    @if (TempData["ErrorMessage"] != null)
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            <i class="fas fa-exclamation-circle me-2"></i>@TempData["ErrorMessage"]
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        </div>
                    }

                    <form asp-action="Edit" method="post">
                        <input type="hidden" asp-for="LocationId" />
                        <input type="hidden" asp-for="CreatedDate" />

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label asp-for="LocationName" class="form-label fw-bold">
                                    <i class="fas fa-map-marker-alt me-1"></i>Tên địa điểm <span class="text-danger">*</span>
                                </label>
                                <input asp-for="LocationName" class="form-control" placeholder="Nhập tên địa điểm" />
                                <span asp-validation-for="LocationName" class="text-danger"></span>
                            </div>

                            <div class="col-md-6 mb-3">
                                <label asp-for="ContactPhone" class="form-label fw-bold">
                                    <i class="fas fa-phone me-1"></i>Số điện thoại
                                </label>
                                <input asp-for="ContactPhone" class="form-control" placeholder="Nhập số điện thoại" />
                                <span asp-validation-for="ContactPhone" class="text-danger"></span>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label fw-bold">
                                <i class="fas fa-map me-1"></i>Địa chỉ <span class="text-danger">*</span>
                            </label>
                            <div class="row g-2">
                                <div class="col-md-4">
                                    <select id="province" class="form-control" name="Province">
                                        <option value="">Chọn tỉnh/thành phố</option>
                                    </select>
                                </div>
                                <div class="col-md-4">
                                    <select id="district" class="form-control" name="District" disabled>
                                        <option value="">Chọn quận/huyện</option>
                                    </select>
                                </div>
                                <div class="col-md-4">
                                    <select id="ward" class="form-control" name="Ward" disabled>
                                        <option value="">Chọn phường/xã</option>
                                    </select>
                                </div>
                            </div>
                            <div class="mt-2">
                                <input type="text" id="addressDetail" name="AddressDetail" class="form-control" placeholder="Số nhà, tên đường">
                            </div>
                                                         <input type="hidden" asp-for="Address" id="fullAddress" />
                             <span asp-validation-for="Address" class="text-danger"></span>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label asp-for="Capacity" class="form-label fw-bold">
                                    <i class="fas fa-users me-1"></i>Sức chứa <span class="text-danger">*</span>
                                </label>
                                <div class="input-group">
                                    <input asp-for="Capacity" class="form-control" type="number" min="1" max="1000" placeholder="Nhập sức chứa" />
                                    <span class="input-group-text">người</span>
                                </div>
                                <span asp-validation-for="Capacity" class="text-danger"></span>
                            </div>

                            <div class="col-md-6 mb-3">
                                <label class="form-label fw-bold">
                                    <i class="fas fa-toggle-on me-1"></i>Trạng thái
                                </label>
                                <div class="form-check form-switch">
                                    <input asp-for="IsActive" class="form-check-input" type="checkbox" />
                                    <label asp-for="IsActive" class="form-check-label">
                                        Hoạt động
                                    </label>
                                </div>
                                <small class="text-muted">Bật/tắt để kích hoạt hoặc tạm ngưng địa điểm</small>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label fw-bold">
                                <i class="fas fa-calendar me-1"></i>Thông tin bổ sung
                            </label>
                            <div class="row">
                                <div class="col-md-6">
                                    <small class="text-muted">
                                        <strong>Ngày tạo:</strong> @Model.CreatedDate.ToString("dd/MM/yyyy HH:mm")
                                    </small>
                                </div>
                                <div class="col-md-6">
                                    <small class="text-muted">
                                        <strong>ID:</strong> @Model.LocationId
                                    </small>
                                </div>
                            </div>
                        </div>

                        <div class="d-flex justify-content-between">
                            <a asp-action="Index" class="btn btn-secondary">
                                <i class="fas fa-arrow-left me-2"></i>Quay lại
                            </a>
                            <div>
                                <button type="button" class="btn btn-outline-danger me-2" onclick="confirmReset()">
                                    <i class="fas fa-undo me-2"></i>Khôi phục
                                </button>
                                <button type="submit" class="btn btn-danger">
                                    <i class="fas fa-save me-2"></i>Lưu thay đổi
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script src="~/js/sweetalert-helper.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const provinceSelect = document.getElementById('province');
            const districtSelect = document.getElementById('district');
            const wardSelect = document.getElementById('ward');
            const addressDetailInput = document.getElementById('addressDetail');
            const fullAddressInput = document.getElementById('fullAddress');
            
            function decodeHTMLEntities(text) {
                if (!text) return '';
                const textArea = document.createElement('textarea');
                textArea.innerHTML = text;
                return textArea.value;
            }

            async function loadProvinces() {
                try {
                    const response = await fetch('https://provinces.open-api.vn/api/p/');
                    const provinces = await response.json();
                    
                    provinces.forEach(province => {
                        const option = new Option(province.name, province.name);
                        provinceSelect.add(option);
                    });

                    // Parse and set current address
                    parseCurrentAddress();
                } catch (error) {
                    console.error('Error loading provinces:', error);
                }
            }

            async function loadDistricts(provinceName) {
                try {
                    const response = await fetch(`https://provinces.open-api.vn/api/p/search/?q=${encodeURIComponent(provinceName)}`);
                    const provinces = await response.json();
                    
                    if (provinces.length > 0) {
                        const province = provinces[0];
                        const districtsResponse = await fetch(`https://provinces.open-api.vn/api/p/${province.code}?depth=2`);
                        const provinceData = await districtsResponse.json();
                        
                        provinceData.districts.forEach(district => {
                            const option = new Option(district.name, district.name);
                            districtSelect.add(option);
                        });

                        // Try to set district if we have one
                        const currentDistrict = getCurrentDistrict();
                        if (currentDistrict) {
                            const options = Array.from(districtSelect.options);
                            const option = options.find(opt => 
                                opt.text.trim().toLowerCase() === currentDistrict.trim().toLowerCase()
                            );
                            if (option) {
                                option.selected = true;
                                wardSelect.disabled = false;
                                loadWards(option.text);
                            }
                        }
                    }
                } catch (error) {
                    console.error('Error loading districts:', error);
                }
            }

            async function loadWards(districtName) {
                try {
                    const response = await fetch(`https://provinces.open-api.vn/api/d/search/?q=${encodeURIComponent(districtName)}`);
                    const districts = await response.json();
                    
                    if (districts.length > 0) {
                        const district = districts[0];
                        const wardsResponse = await fetch(`https://provinces.open-api.vn/api/d/${district.code}?depth=2`);
                        const districtData = await wardsResponse.json();
                        
                        districtData.wards.forEach(ward => {
                            const option = new Option(ward.name, ward.name);
                            wardSelect.add(option);
                        });

                        // Try to set ward if we have one
                        const currentWard = getCurrentWard();
                        if (currentWard) {
                            const options = Array.from(wardSelect.options);
                            const option = options.find(opt => 
                                opt.text.trim().toLowerCase() === currentWard.trim().toLowerCase()
                            );
                            if (option) {
                                option.selected = true;
                                updateFullAddress();
                            }
                        }
                    }
                } catch (error) {
                    console.error('Error loading wards:', error);
                }
            }

            function updateFullAddress() {
                try {
                    const province = provinceSelect.options[provinceSelect.selectedIndex]?.text || '';
                    const district = districtSelect.options[districtSelect.selectedIndex]?.text || '';
                    const ward = wardSelect.options[wardSelect.selectedIndex]?.text || '';
                    const addressDetail = addressDetailInput.value.trim();

                    const parts = [addressDetail, ward, district, province].filter(part => part);
                    const fullAddress = parts.join(', ');

                    if (fullAddressInput) {
                        fullAddressInput.value = fullAddress;
                    }
                } catch (error) {
                    console.error('Error updating address:', error);
                }
            }

            function parseCurrentAddress() {
                const currentAddress = decodeHTMLEntities('@Model.Address');
                if (!currentAddress) return;

                console.log('Parsing current address:', currentAddress);
                
                // Parse address parts
                const parts = currentAddress.split(', ').map(part => part.trim());
                console.log('Address parts:', parts);

                if (parts.length >= 3) {
                    let addressDetail, ward, district, province;
                    
                    if (parts.length === 4) {
                        // Format: "Số nhà, Phường, Quận, Tỉnh"
                        addressDetail = parts[0];
                        ward = parts[1];
                        district = parts[2];
                        province = parts[3];
                    } else if (parts.length === 3) {
                        // Format: "Phường, Quận, Tỉnh"
                        ward = parts[0];
                        district = parts[1];
                        province = parts[2];
                    }

                    // Set address detail
                    if (addressDetail) {
                        addressDetailInput.value = addressDetail;
                    }

                    // Try to set province
                    if (province) {
                        const options = Array.from(provinceSelect.options);
                        const option = options.find(opt => 
                            opt.text.trim().toLowerCase() === province.trim().toLowerCase()
                        );
                        if (option) {
                            option.selected = true;
                            districtSelect.disabled = false;
                            loadDistricts(option.text);
                        }
                    }
                }
            }

            function getCurrentDistrict() {
                const currentAddress = decodeHTMLEntities('@Model.Address');
                if (!currentAddress) return null;

                const parts = currentAddress.split(', ').map(part => part.trim());
                if (parts.length >= 3) {
                    if (parts.length === 4) {
                        return parts[2]; // district
                    } else if (parts.length === 3) {
                        return parts[1]; // district
                    }
                }
                return null;
            }

            function getCurrentWard() {
                const currentAddress = decodeHTMLEntities('@Model.Address');
                if (!currentAddress) return null;

                const parts = currentAddress.split(', ').map(part => part.trim());
                if (parts.length >= 3) {
                    if (parts.length === 4) {
                        return parts[1]; // ward
                    } else if (parts.length === 3) {
                        return parts[0]; // ward
                    }
                }
                return null;
            }



            provinceSelect.addEventListener('change', async function() {
                districtSelect.innerHTML = '<option value="">Chọn quận/huyện</option>';
                wardSelect.innerHTML = '<option value="">Chọn phường/xã</option>';
                
                districtSelect.disabled = !this.value;
                wardSelect.disabled = true;
                
                if (this.value) {
                    await loadDistricts(this.value);
                }
                updateFullAddress();
            });

            districtSelect.addEventListener('change', async function() {
                wardSelect.innerHTML = '<option value="">Chọn phường/xã</option>';
                wardSelect.disabled = !this.value;
                
                if (this.value) {
                    await loadWards(this.value);
                }
                updateFullAddress();
            });

            wardSelect.addEventListener('change', function() {
                updateFullAddress();
            });

            addressDetailInput.addEventListener('input', function() {
                updateFullAddress();
            });

            // Initialize the form
            loadProvinces();
        });

        function confirmReset() {
            Swal.fire({
                title: 'Xác nhận khôi phục',
                text: 'Bạn có chắc chắn muốn khôi phục lại thông tin ban đầu?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#6c757d',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Khôi phục',
                cancelButtonText: 'Hủy'
            }).then((result) => {
                if (result.isConfirmed) {
                    location.reload();
                }
            });
        }

        @if (TempData["SuccessMessage"] != null)
        {
            <text>
                showSuccess("Thành công");
            </text>
        }
        
        @if (TempData["ErrorMessage"] != null)
        {
            <text>
                showError("Lỗi");
            </text>
        }
    </script>
} 