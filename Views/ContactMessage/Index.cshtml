@model IEnumerable<Blood_Donation_Website.Models.DTOs.ContactMessageDto>
@using Blood_Donation_Website.Utilities
@{
    ViewData["Title"] = "Quản lý tin nhắn liên hệ";
    var currentStatus = Context.Request.Query["status"].ToString();
    var messageStatusOptions = EnumMapper.GetMessageStatusOptions();
    
    string GetStatusDisplayName(EnumMapper.MessageStatus status)
    {
        return EnumMapper.GetDisplayName<EnumMapper.MessageStatus>(status);
    }
}

<div class="container py-5">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2 class="text-danger fw-bold">
                    <i class="fas fa-envelope me-2"></i>Quản lý tin nhắn liên hệ
                </h2>
                <div>
                    <a asp-action="UnreadMessages" class="btn btn-warning me-2">
                        <i class="fas fa-envelope-open me-2"></i>Chưa đọc
                    </a>
                    <a asp-action="Statistics" class="btn btn-info">
                        <i class="fas fa-chart-bar me-2"></i>Thống kê
                    </a>
                </div>
            </div>

            <!-- SweetAlert notifications will be handled by _SweetAlertNotifications partial -->

            <div class="card shadow-sm">
                <div class="card-body">
                    <!-- Filter Section -->
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <form method="get" class="d-flex gap-2">
                                <select name="status" class="form-select" style="max-width: 200px;">
                                    <option value="">Tất cả trạng thái</option>
                                    @foreach (var option in messageStatusOptions)
                                    {
                                        if (currentStatus == option.Value)
                                        {
                                            <option value="@option.Value" selected>@option.Text</option>
                                        }
                                        else
                                        {
                                            <option value="@option.Value">@option.Text</option>
                                        }
                                    }
                                </select>
                                <button type="submit" class="btn btn-outline-primary">
                                    <i class="fas fa-filter me-2"></i>Lọc
                                </button>
                                @if (!string.IsNullOrEmpty(currentStatus))
                                {
                                    <a href="@Url.Action("Index")" class="btn btn-outline-secondary">
                                        <i class="fas fa-times me-2"></i>Xóa lọc
                                    </a>
                                }
                            </form>
                        </div>
                        <div class="col-md-6 text-end">
                            <small class="text-muted">
                                Hiển thị @Model.Count() tin nhắn
                                @if (!string.IsNullOrEmpty(currentStatus))
                                {
                                    <span>với trạng thái "@GetStatusDisplayName((EnumMapper.MessageStatus)Enum.Parse(typeof(EnumMapper.MessageStatus), currentStatus))"</span>
                                }
                            </small>
                        </div>
                    </div>

                    @if (!Model.Any())
                    {
                        <div class="text-center py-5">
                            <i class="fas fa-inbox fa-3x text-muted mb-3"></i>
                            <h5 class="text-muted">Chưa có tin nhắn nào</h5>
                            <p class="text-muted">
                                @if (!string.IsNullOrEmpty(currentStatus))
                                {
                                    <span>Không có tin nhắn nào với trạng thái "@GetStatusDisplayName((EnumMapper.MessageStatus)Enum.Parse(typeof(EnumMapper.MessageStatus), currentStatus))"</span>
                                }
                                else
                                {
                                    <span>Hộp thư liên hệ trống.</span>
                                }
                            </p>
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="table-danger">
                                    <tr>
                                        <th>Người gửi</th>
                                        <th>Tiêu đề</th>
                                        <th>Ngày gửi</th>
                                        <th>Trạng thái</th>
                                        <th>Thao tác</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var message in Model)
                                    {
                                        <tr class="@(message.Status == EnumMapper.MessageStatus.New ? "table-warning" : message.Status == EnumMapper.MessageStatus.Read ? "table-info" : "")">
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <div class="bg-primary rounded me-2 d-flex align-items-center justify-content-center" style="width: 40px; height: 40px;">
                                                        <i class="fas fa-user text-white"></i>
                                                    </div>
                                                    <div>
                                                        <h6 class="mb-0">@message.FullName</h6>
                                                        <small class="text-muted">@message.Email</small>
                                                    </div>
                                                </div>
                                            </td>
                                            <td>
                                                <div>
                                                    <h6 class="mb-0 @(message.Status == EnumMapper.MessageStatus.New || message.Status == EnumMapper.MessageStatus.Read ? "fw-bold" : "")">@message.Subject</h6>
                                                    <small class="text-muted">@message.Message?.Substring(0, Math.Min(50, message.Message.Length))...</small>
                                                </div>
                                            </td>
                                            <td>
                                                <small class="text-muted">@message.CreatedDate.ToString("dd/MM/yyyy HH:mm")</small>
                                            </td>
                                            <td>
                                                @{
                                                    var statusClass = message.Status switch
                                                    {
                                                        EnumMapper.MessageStatus.New => "bg-primary",
                                                        EnumMapper.MessageStatus.Read => "bg-info",
                                                        EnumMapper.MessageStatus.InProgress => "bg-warning",
                                                        EnumMapper.MessageStatus.Resolved => "bg-success",
                                                        EnumMapper.MessageStatus.Closed => "bg-secondary",
                                                        _ => "bg-secondary"
                                                    };
                                                    
                                                    var statusText = GetStatusDisplayName(message.Status);
                                                }
                                                <span class="badge @statusClass">@statusText</span>
                                            </td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <a asp-action="Details" asp-route-id="@message.MessageId" class="btn btn-sm btn-outline-info" title="Chi tiết">
                                                        <i class="fas fa-eye"></i>
                                                    </a>
                                                    <a asp-action="Reply" asp-route-id="@message.MessageId" class="btn btn-sm btn-outline-primary" title="Trả lời">
                                                        <i class="fas fa-reply"></i>
                                                    </a>
                                                    @if (message.Status == EnumMapper.MessageStatus.New)
                                                    {
                                                        <button type="button" class="btn btn-sm btn-outline-success" title="Đánh dấu đã đọc" 
                                                                onclick="markAsRead(@message.MessageId)">
                                                            <i class="fas fa-check"></i>
                                                        </button>
                                                    }
                                                    else if (message.Status == EnumMapper.MessageStatus.Read)
                                                    {
                                                        <button type="button" class="btn btn-sm btn-outline-warning" title="Đánh dấu chưa đọc" 
                                                                onclick="markAsUnread(@message.MessageId)">
                                                            <i class="fas fa-envelope"></i>
                                                        </button>
                                                    }
                                                    else
                                                    {
                                                        <button type="button" class="btn btn-sm btn-outline-secondary" title="Không thể thay đổi trạng thái" disabled>
                                                            <i class="fas fa-lock"></i>
                                                        </button>
                                                    }
                                                    <button type="button" class="btn btn-sm btn-outline-danger" title="Xóa" 
                                                            onclick="confirmDelete(@message.MessageId, '@message.Subject')">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- SweetAlert will handle all confirmations -->

@section Scripts {
    <!-- SweetAlert Helper -->
    <script src="~/js/sweetalert-helper.js" asp-append-version="true"></script>
    
    <script>
        function confirmDelete(messageId, messageSubject) {
            showDeleteConfirm(`tin nhắn "${messageSubject}"`, 'Hành động này không thể hoàn tác.')
                .then((result) => {
                    if (result.isConfirmed) {
                        const form = document.createElement('form');
                        form.method = 'POST';
                        form.action = `/admin/contact-messages/delete/${messageId}`;
                        
                        const token = document.createElement('input');
                        token.type = 'hidden';
                        token.name = '__RequestVerificationToken';
                        token.value = document.querySelector('input[name="__RequestVerificationToken"]').value;
                        
                        form.appendChild(token);
                        document.body.appendChild(form);
                        form.submit();
                    }
                });
        }

        function markAsRead(messageId) {
            showLoading('Đang xử lý...', 'Đánh dấu tin nhắn đã đọc');
            
            const form = document.createElement('form');
            form.method = 'POST';
            form.action = `/admin/contact-messages/mark-read/${messageId}`;
            
            const token = document.createElement('input');
            token.type = 'hidden';
            token.name = '__RequestVerificationToken';
            token.value = document.querySelector('input[name="__RequestVerificationToken"]').value;
            
            form.appendChild(token);
            document.body.appendChild(form);
            form.submit();
        }

        function markAsUnread(messageId) {
            showLoading('Đang xử lý...', 'Đánh dấu tin nhắn chưa đọc');
            
            const form = document.createElement('form');
            form.method = 'POST';
            form.action = `/admin/contact-messages/mark-unread/${messageId}`;
            
            const token = document.createElement('input');
            token.type = 'hidden';
            token.name = '__RequestVerificationToken';
            token.value = document.querySelector('input[name="__RequestVerificationToken"]').value;
            
            form.appendChild(token);
            document.body.appendChild(form);
            form.submit();
        }

        // Show toast notification when page loads
        document.addEventListener('DOMContentLoaded', function() {
            const messageCount = @Model.Count();
            const currentStatus = '@currentStatus';
            
            if (messageCount > 0) {
                let statusText = '';
                if (currentStatus) {
                    const statusOptions = @Html.Raw(Json.Serialize(messageStatusOptions));
                    const statusOption = statusOptions.find(opt => opt.value === currentStatus);
                    statusText = statusOption ? ` với trạng thái "${statusOption.text}"` : '';
                }
                
                showToast('info', `Hiển thị ${messageCount} tin nhắn${statusText}`, 3000);
            }
        });
    </script>
} 